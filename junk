*** mytoolkit.ps1	2018-11-11 01:09:32.912706958 +0900
--- /home/m-ito/tmp/mytoolkit.ps1	2018-11-12 00:33:25.597391000 +0900
***************
*** 623,632 ****
  		$multikey = ""
  		$files = @{}
  		$filesIndex = 0
  		for ($i = 0; $i -lt $args.length; $i++){
  			if ($args[$i] -eq "-h" -or $args[$i] -eq "--help"){
  				$helpSw = $true
! 				write-output "Usage: psjoin [-h|--help] [-d ""delimiter""] [-1 ""index,...""] [-2 ""index,...""] [-a [m|1|2|12|21]] [-m [1|2]] input1 input2"
  				write-output "For each pair of input lines with identical join fields, write a line to"
  				write-output "standard output.  The default join field is the first, delimited by "",""."
  				write-output ""
--- 623,634 ----
  		$multikey = ""
  		$files = @{}
  		$filesIndex = 0
+ 		$encoding1 = 0
+ 		$encoding2 = 0
  		for ($i = 0; $i -lt $args.length; $i++){
  			if ($args[$i] -eq "-h" -or $args[$i] -eq "--help"){
  				$helpSw = $true
! 				write-output "Usage: psjoin [-h|--help] [-d ""delimiter""] [-1 ""index,...""] [-2 ""index,...""] [-a [m|1|2|12|21]] [-m [1|2]] [-e1 encoding] [-e2 encoding] input1 input2"
  				write-output "For each pair of input lines with identical join fields, write a line to"
  				write-output "standard output.  The default join field is the first, delimited by "",""."
  				write-output ""
***************
*** 639,644 ****
--- 641,648 ----
  				write-output "     12                   write all lines from input1 and matching lines from input2"
  				write-output "     21                   write all lines from input2 and matching lines from input1"
  				write-output "  -m [1|2]                specify input which has multiple join fields"
+ 				write-output "  -e1 encoding            encoding for file 1(default 0 means Default)"
+ 				write-output "  -e2 encoding            encoding for file 2(default 0 means Default)"
  				return
  			}elseif ($args[$i] -eq "-d"){
  				$i++
***************
*** 655,669 ****
  			}elseif ($args[$i] -eq "-m"){
  				$i++
  				$multikey = $args[$i]
  			}else{
  #				$files[$filesIndex] = (resolve-path $args[$i]).Path
  				$files[$filesIndex] = psabspath $args[$i]
  				$filesIndex++
  			}
  		}
! #		$oIn1 = New-Object System.IO.StreamReader($files[0],[Text.Encoding]::GetEncoding("Shift_JIS"))
! 		$oIn1 = New-Object System.IO.StreamReader($files[0],[Text.Encoding]::Default)
! 		$oIn2 = New-Object System.IO.StreamReader($files[1],[Text.Encoding]::Default)
  	}
  	process{
  		if ($helpSw -eq $false){
--- 659,680 ----
  			}elseif ($args[$i] -eq "-m"){
  				$i++
  				$multikey = $args[$i]
+ 			}elseif ($args[$i] -eq "-e1"){
+ 				$i++
+ 				$encoding1 = $args[$i]
+ 			}elseif ($args[$i] -eq "-e2"){
+ 				$i++
+ 				$encoding2 = $args[$i]
  			}else{
  #				$files[$filesIndex] = (resolve-path $args[$i]).Path
  				$files[$filesIndex] = psabspath $args[$i]
  				$filesIndex++
  			}
  		}
! #		$oIn1 = New-Object System.IO.StreamReader($files[0],[Text.Encoding]::Default)
! #		$oIn2 = New-Object System.IO.StreamReader($files[1],[Text.Encoding]::Default)
! 		$oIn1 = New-Object System.IO.StreamReader($files[0],[Text.Encoding]::GetEncoding($encoding1))
! 		$oIn2 = New-Object System.IO.StreamReader($files[1],[Text.Encoding]::GetEncoding($encoding2))
  	}
  	process{
  		if ($helpSw -eq $false){
***************
*** 2064,2083 ****
  #
  # pssock_open - Open socket for client
  #
! Function pssock_open($addr, $port){
  	if ($args[0] -eq "-h" -or $args[0] -eq "--help"){
! 		write-output "Usage: pssock_open server_ip server_port"
  		write-output "Open socket for client."
  		write-output "ex."
! 		write-output '    $param = pssock_open "127.0.0.1" "12345"'
  		write-output ""
  		return
  	}
  
  	$client = New-Object System.Net.Sockets.TcpClient ($addr, $port)
  	$stream = $client.GetStream()
! 	$reader = New-Object IO.StreamReader($stream,[Text.Encoding]::Default)
! 	$writer = New-Object IO.StreamWriter($stream,[Text.Encoding]::Default)
  	$param = @{"client" = $client; "stream" = $stream; "writer" = $writer; "reader" = $reader}
  	return $param
  }
--- 2075,2096 ----
  #
  # pssock_open - Open socket for client
  #
! Function pssock_open($addr, $port, $encoding = 0){
  	if ($args[0] -eq "-h" -or $args[0] -eq "--help"){
! 		write-output "Usage: pssock_open server_ip server_port [encoding]"
  		write-output "Open socket for client."
  		write-output "ex."
! 		write-output '    $param = pssock_open "127.0.0.1" "12345" "utf8"'
  		write-output ""
  		return
  	}
  
  	$client = New-Object System.Net.Sockets.TcpClient ($addr, $port)
  	$stream = $client.GetStream()
! #	$reader = New-Object IO.StreamReader($stream,[Text.Encoding]::Default)
! #	$writer = New-Object IO.StreamWriter($stream,[Text.Encoding]::Default)
! 	$reader = New-Object IO.StreamReader($stream,[Text.Encoding]::GetEncoding($encoding))
! 	$writer = New-Object IO.StreamWriter($stream,[Text.Encoding]::GetEncoding($encoding))
  	$param = @{"client" = $client; "stream" = $stream; "writer" = $writer; "reader" = $reader}
  	return $param
  }
***************
*** 2183,2208 ****
  #
  # pssock_accept - Accept connection from client
  #
! Function pssock_accept($server){
  	if ($args[0] -eq "-h" -or $args[0] -eq "--help"){
! 		write-output "Usage: pssock_accept server"
  		write-output "Accept connection from client."
  		write-output "ex."
! 		write-output '    $param = pssock_accept $server'
  		write-output ""
  		return
  	}
  
  	$client = $server.AcceptTcpClient()
  	$stream = $client.GetStream()
! 	$reader = New-Object IO.StreamReader($stream,[Text.Encoding]::Default)
! 	$writer = New-Object IO.StreamWriter($stream,[Text.Encoding]::Default)
  	$param = @{"client" = $client; "stream" = $stream; "reader" = $reader; "writer" = $writer}
  	return $param
  }
  
  #
! # pssock_unaccept - Unaccept(disconnect) connection from client
  #
  Function pssock_unaccept($param){
  	if ($args[0] -eq "-h" -or $args[0] -eq "--help"){
--- 2196,2223 ----
  #
  # pssock_accept - Accept connection from client
  #
! Function pssock_accept($server, $encoding = 0){
  	if ($args[0] -eq "-h" -or $args[0] -eq "--help"){
! 		write-output "Usage: pssock_accept server [encoding]"
  		write-output "Accept connection from client."
  		write-output "ex."
! 		write-output '    $param = pssock_accept $server "utf8"'
  		write-output ""
  		return
  	}
  
  	$client = $server.AcceptTcpClient()
  	$stream = $client.GetStream()
! #	$reader = New-Object IO.StreamReader($stream,[Text.Encoding]::Default)
! #	$writer = New-Object IO.StreamWriter($stream,[Text.Encoding]::Default)
! 	$reader = New-Object IO.StreamReader($stream,[Text.Encoding]::GetEncoding($encoding))
! 	$writer = New-Object IO.StreamWriter($stream,[Text.Encoding]::GetEncoding($encoding))
  	$param = @{"client" = $client; "stream" = $stream; "reader" = $reader; "writer" = $writer}
  	return $param
  }
  
  #
! # pssock_accept - Unaccept(disconnect) connection from client
  #
  Function pssock_unaccept($param){
  	if ($args[0] -eq "-h" -or $args[0] -eq "--help"){
***************
*** 2220,2343 ****
  	$param["client"].Close()
  }
  
  #
! # psrunspc_getarraylist - Get System.Collections.ArrayList
  #
  Function psrunspc_getarraylist(){
- 	if ($args[0] -eq "-h" -or $args[0] -eq "--help"){
- 		write-output "Usage: psrunspc_getarraylist"
- 		write-output "Get System.Collections.ArrayList."
- 		write-output "ex."
- 		write-output '    $refArray = psrunspc_getarraylist'
- 		write-output '    $Array0 = $ref.Array.value[0]'
- 		write-output ""
- 		return
- 	}
  	$al = New-Object System.Collections.ArrayList
  	return [Ref]$al
  }
  
- #
- # psrunspc_open - Create and Open RunSpacePool
- #
  Function psrunspc_open($max_runspace){
- 	if ($args[0] -eq "-h" -or $args[0] -eq "--help"){
- 		write-output "Usage: psrunspc_open max_runspace"
- 		write-output "Create and Open RunSpacePool."
- 		write-output "ex."
- 		write-output '    $rsp = psrunspc_open 10'
- 		write-output '    ... something to do ...'
- 		write-output '    psrunspc_close $rsp'
- 		write-output ""
- 		return
- 	}
  	$rsp = [RunspaceFactory]::CreateRunspacePool(1, $max_runspace)
  	$rsp.Open()
  	return $rsp
  }
  
- #
- # psrunspc_close - Close RunSpacePool
- #
  Function psrunspc_close($rsp){
- 	if ($args[0] -eq "-h" -or $args[0] -eq "--help"){
- 		write-output "Usage: psrunspc_close run_space_pool"
- 		write-output "Close RunSpacePool."
- 		write-output "ex."
- 		write-output '    $rsp = psrunspc_open 10'
- 		write-output '    ... something to do ...'
- 		write-output '    psrunspc_close $rsp'
- 		write-output ""
- 		return
- 	}
  	$rsp.Close()
  }
  
- #
- # psrunspc_createthread - Create thread of powershell and add script to it
- #
  Function psrunspc_createthread($rsp, $script){
- 	if ($args[0] -eq "-h" -or $args[0] -eq "--help"){
- 		write-output "Usage: psrunspc_createthread run_space_pool script_block"
- 		write-output "Create thread of powershell and add script to it."
- 		write-output "ex."
- 		write-output '    $ps = psrunspc_createthread $rsp $script'
- 		write-output ""
- 		return
- 	}
  	$ps = [PowerShell]::Create()
  	$ps.RunspacePool = $rsp
  	$ps.AddScript($script) | out-null
  	return $ps
  }
  
- #
- # psrunspc_addargument - Add argument to thread of powershell
- #
  Function psrunspc_addargument($ps, $arg){
- 	if ($args[0] -eq "-h" -or $args[0] -eq "--help"){
- 		write-output "Usage: psrunspc_addargument thread_of_powershellargument"
- 		write-output "Add argument to thread of powershell."
- 		write-output "ex."
- 		write-output '    psrunspc_addargument $argument'
- 		write-output ""
- 		return
- 	}
  	$ps.AddArgument($arg) | out-null
  }
  
- #
- # psrunspc_begin - Begin script in thread
- #
  Function psrunspc_begin($ps, $aryps, $arych){
- 	if ($args[0] -eq "-h" -or $args[0] -eq "--help"){
- 		write-output "Usage: psrunspc_begin thread_of_powershell arraylist_of_powershell arraylist_of_child"
- 		write-output "Begin script in thread."
- 		write-output "ex."
- 		write-output '    $refAryps = psrunspc_getarraylist'
- 		write-output '    $refArych = psrunspc_getarraylist'
- 		write-output '    ... something to do ...'
- 		write-output '    psrunspc_begin $ps $refAryps.value $refArych.value'
- 		write-output ""
- 		return
- 	}
  	$ch = $ps.BeginInvoke()
  	$aryps.Add($ps) | Out-Null
  	$arych.Add($ch) | Out-Null
  }
  
- #
- # psrunspc_wait - Wait terminate of all child thread
- #
  Function psrunspc_wait($aryps, $arych){
- 	if ($args[0] -eq "-h" -or $args[0] -eq "--help"){
- 		write-output "Usage: psrunspc_wait arraylist_of_powershell arraylist_of_child"
- 		write-output "Wait terminate of all child thread."
- 		write-output "ex."
- 		write-output '    psrunspc_wait $refAryps.value $refArych.value'
- 		write-output ""
- 		return
- 	}
  	for ($i = 0; $i -lt $aryps.Count; $i++){
  		$ps = $aryps[$i]
  		$ch = $arych[$i]
--- 2235,2277 ----
  	$param["client"].Close()
  }
  
+ 
  #
! # runspace
  #
  Function psrunspc_getarraylist(){
  	$al = New-Object System.Collections.ArrayList
  	return [Ref]$al
  }
  
  Function psrunspc_open($max_runspace){
  	$rsp = [RunspaceFactory]::CreateRunspacePool(1, $max_runspace)
  	$rsp.Open()
  	return $rsp
  }
  
  Function psrunspc_close($rsp){
  	$rsp.Close()
  }
  
  Function psrunspc_createthread($rsp, $script){
  	$ps = [PowerShell]::Create()
  	$ps.RunspacePool = $rsp
  	$ps.AddScript($script) | out-null
  	return $ps
  }
  
  Function psrunspc_addargument($ps, $arg){
  	$ps.AddArgument($arg) | out-null
  }
  
  Function psrunspc_begin($ps, $aryps, $arych){
  	$ch = $ps.BeginInvoke()
  	$aryps.Add($ps) | Out-Null
  	$arych.Add($ch) | Out-Null
  }
  
  Function psrunspc_wait($aryps, $arych){
  	for ($i = 0; $i -lt $aryps.Count; $i++){
  		$ps = $aryps[$i]
  		$ch = $arych[$i]
***************
*** 2348,2365 ****
  	}
  }
  
- #
- # psrunspc_waitasync - Wait asynchronously terminate of all child thread
- #
  Function psrunspc_waitasync($aryps, $arych){
- 	if ($args[0] -eq "-h" -or $args[0] -eq "--help"){
- 		write-output "Usage: psrunspc_waitasync arraylist_of_powershell arraylist_of_child"
- 		write-output "Wait asynchronously terminate of all child thread."
- 		write-output "ex."
- 		write-output '    psrunspc_waitasync $refAryps.value $refArych.value'
- 		write-output ""
- 		return
- 	}
  	for ($i = 0; $i -lt $aryps.Count; $i++){
  		$ps = $aryps[$i]
  		$ch = $arych[$i]
--- 2282,2288 ----
***************
*** 2370,2373 ****
  			$arych.removeAt($i)
  		}
  	}
! }
--- 2293,2296 ----
  			$arych.removeAt($i)
  		}
  	}
! }
\ ファイル末尾に改行がありません
